通过sanitize定位检查jni接口中C++代码中内存问题

 506  vim HelloJNI.java

  编译生成class文件  javac HelloJNI.java//

root@sdn:~/kevin/jnitest# ls -alh
total 16K
drwxr-xr-x 2 root root 4.0K 9月  21 01:12 .
drwxr-xr-x 5 root root 4.0K 9月  21 01:10 ..
-rw-r--r-- 1 root root  449 9月  21 01:12 HelloJNI.class
-rw-r--r-- 1 root root  440 9月  21 01:12 HelloJNI.java


  编译生成生成h头文件 javah HelloJNI //java 11会有问题

root@sdn:~/kevin/jnitest# ls -alh
total 20K
drwxr-xr-x 2 root root 4.0K 9月  21 01:13 .
drwxr-xr-x 5 root root 4.0K 9月  21 01:10 ..
-rw-r--r-- 1 root root  449 9月  21 01:12 HelloJNI.class
-rw-r--r-- 1 root root  373 9月  21 01:13 HelloJNI.h
-rw-r--r-- 1 root root  440 9月  21 01:12 HelloJNI.java


  检查生成的h头文件  cat HelloJNI.h

root@sdn:~/kevin/jnitest# cat HelloJNI.h
/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class HelloJNI */

#ifndef _Included_HelloJNI
#define _Included_HelloJNI
#ifdef __cplusplus
extern "C" {
#endif
/*
 * Class:     HelloJNI
 * Method:    sayHello
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_HelloJNI_sayHello
  (JNIEnv *, jobject);

#ifdef __cplusplus
}
#endif
#endif


  编辑修改库元代码 vim HelloJNI.c

kevin@ubuntu-server-2004:~/jnitest$ cat HelloJNI.c
#include <jni.h>
#include <stdio.h>
#include <stdlib.h>
#include "HelloJNI.h"


//extern  void __asan_unregister_globals(void *globals, size_t n);
//void *force_missing_symbol = (void *)__asan_unregister_globals;

// Implementation of native method sayHello() of HelloJNI class
JNIEXPORT void JNICALL Java_HelloJNI_sayHello(JNIEnv *env, jobject thisObj) {
           char *p=malloc(1024*1024);
             //memset(p,0,1024*1024+2);
        printf("Hello World!\n");
   return;
}
  编译生成libhello.so库 

gcc -fPIC -f=address    --shared HelloJNI.c -o libhello.so -I/usr/lib/jvm/java-8-openjdk-amd64/include/ -I/usr/lib/jvm/java-8-openjdk-amd64/include/linux



关键步骤1：通过 -fsanitize=address  -fno-omit-frame-pointer 编译选项整个so文件

gcc  -fsanitize=address  -fno-omit-frame-pointer   --shared HelloJNI.c -g -o libhello.so -I/usr/lib/jvm/java-8-openjdk-amd64/include/ -I/usr/lib/jvm/java-8-openjdk-amd64/include/linux //带有调试信息



  516  ls

root@sdn:~/kevin/jnitest# ls
HelloJNI.c  HelloJNI.class  HelloJNI.h  HelloJNI.java  libhello.so


测试运行java -Djava.library.path=. HelloJNI



root@sdn:~/kevin/jnitest# java -Djava.library.path=. HelloJNI
Hello World!
  

 export LD_PRELOAD=/usr/lib/gcc/x86_64-linux-gnu/5/libasan.so



root@sdn:~/kevin/jnitest# export LD_PRELOAD=/usr/lib/gcc/x86_64-linux-gnu/5/libasan.so



关键步骤2：通过export LD_PRELOAD=/usr/lib/gcc/x86_64-linux-gnu/9/libasan.so 链接asan库，并设置 ASAN_OPTIONS="handle_segv=0 detect_leaks=1  log_path=asan.log" 库选项运行java程序

export LD_PRELOAD=/usr/lib/gcc/x86_64-linux-gnu/9/libasan.so &&ASAN_OPTIONS="handle_segv=0 detect_leaks=1" java -Djava.library.path=. HelloJNI  >mem.log  2>&1

export LD_PRELOAD=/usr/lib/gcc/x86_64-linux-gnu/9/libasan.so && ASAN_OPTIONS="handle_segv=0 detect_leaks=1 log_path=asan.log" java -Djava.library.path=. HelloJNI会在当前目录asan.log文件里面显示内存问题



内存越界：

kevin@ubuntu-server-2004:~/jnitest$ ASAN_OPTIONS="handle_segv=0 detect_leaks=6" java -Djava.library.path=. HelloJNI >mem.log  2>&1
ERROR: Invalid value for bool option: '6'
ERROR: Flag parsing failed.
kevin@ubuntu-server-2004:~/jnitest$ ASAN_OPTIONS="handle_segv=0 detect_leaks=1" java -Djava.library.path=. HelloJNI
=================================================================
==117995==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x7f9fdbab8800 at pc 0x7fa040716f2d bp 0x7fa03bd1b870 sp 0x7fa03bd1b018
WRITE of size 1048578 at 0x7f9fdbab8800 thread T1
    #0 0x7fa040716f2c  (/usr/lib/gcc/x86_64-linux-gnu/9/libasan.so+0x67f2c)
    #1 0x7f9fdbaba210 in Java_HelloJNI_sayHello /home/kevin/jnitest/HelloJNI.c:13 //代码行号+函数名称
    #2 0x7fa02cc34566  (<unknown module>)

0x7f9fdbab8800 is located 0 bytes to the right of 1048576-byte region [0x7f9fdb9b8800,0x7f9fdbab8800)
allocated by thread T1 here:
    #0 0x7fa0407bcbc8 in malloc (/usr/lib/gcc/x86_64-linux-gnu/9/libasan.so+0x10dbc8)
    #1 0x7f9fdbaba1f6 in Java_HelloJNI_sayHello /home/kevin/jnitest/HelloJNI.c:12
    #2 0x7fa02cc34566  (<unknown module>)
    #3 0x7fa02cc240f5  (<unknown module>)
    #4 0x7fa02cc1c4e6  (<unknown module>)
    #5 0x7fa03c59d094  (/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/amd64/server/libjvm.so+0x69e094)
    #6 0x7fa03c617c15  (/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/amd64/server/libjvm.so+0x718c15)
    #7 0x7fa03c61b505  (/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/amd64/server/libjvm.so+0x71c505)
    #8 0x7fa0406a1801  (/usr/lib/jvm/java-8-openjdk-amd64/jre/bin/../lib/amd64/jli/libjli.so+0x4801)
    #9 0x7fa0406a5dc0  (/usr/lib/jvm/java-8-openjdk-amd64/jre/bin/../lib/amd64/jli/libjli.so+0x8dc0)
    #10 0x7fa040478608 in start_thread (/lib/x86_64-linux-gnu/libpthread.so.0+0x9608)

Thread T1 created by T0 here:
    #0 0x7fa0406e9805 in pthread_create (/usr/lib/gcc/x86_64-linux-gnu/9/libasan.so+0x3a805)
    #1 0x7fa0406a6eef  (/usr/lib/jvm/java-8-openjdk-amd64/jre/bin/../lib/amd64/jli/libjli.so+0x9eef)
    #2 0x7fa0406a308d  (/usr/lib/jvm/java-8-openjdk-amd64/jre/bin/../lib/amd64/jli/libjli.so+0x608d)
    #3 0x7fa0406a4551 in JLI_Launch (/usr/lib/jvm/java-8-openjdk-amd64/jre/bin/../lib/amd64/jli/libjli.so+0x7551)
    #4 0x55f3751250a4  (/usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java+0x10a4)
    #5 0x7fa0404ca0b2 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x270b2)

SUMMARY: AddressSanitizer: heap-buffer-overflow (/usr/lib/gcc/x86_64-linux-gnu/9/libasan.so+0x67f2c)
Shadow bytes around the buggy address:
  0x0ff47b74f0b0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0ff47b74f0c0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0ff47b74f0d0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0ff47b74f0e0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0ff47b74f0f0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
=>0x0ff47b74f100:[fa]fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0ff47b74f110: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0ff47b74f120: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0ff47b74f130: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0ff47b74f140: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0ff47b74f150: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           00
  Partially addressable: 01 02 03 04 05 06 07
  Heap left redzone:       fa
  Freed heap region:       fd
  Stack left redzone:      f1
  Stack mid redzone:       f2
  Stack right redzone:     f3
  Stack after return:      f5
  Stack use after scope:   f8
  Global redzone:          f9
  Global init order:       f6
  Poisoned by user:        f7
  Container overflow:      fc
  Array cookie:            ac
  Intra object redzone:    bb
  ASan internal:           fe
  Left alloca redzone:     ca
  Right alloca redzone:    cb
  Shadow gap:              cc
==117995==ABORTING


内存泄漏：

===================================================================118558==ERROR: LeakSanitizer: detected memory leaks

Direct leak of 1048576 byte(s) in 1 object(s) allocated from:
    #0 0x7f3521396bc8 in malloc (/usr/lib/gcc/x86_64-linux-gnu/9/libasan.so+0x10dbc8)
    #1 0x7f350d4041d6 in Java_HelloJNI_sayHello /home/kevin/jnitest/HelloJNI.c:12 //代码行号+函数名称
    #2 0x7f350d834566  (<unknown module>)
    #3 0x7f350d8240f5  (<unknown module>)
    #4 0x7f350d81c4e6  (<unknown module>)
    #5 0x7f351d19d094  (/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/amd64/server/libjvm.so+0x69e094)
    #6 0x7f351d217c15  (/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/amd64/server/libjvm.so+0x718c15)
    #7 0x7f351d21b505  (/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/amd64/server/libjvm.so+0x71c505)
    #8 0x7f352127b801  (/usr/lib/jvm/java-8-openjdk-amd64/jre/bin/../lib/amd64/jli/libjli.so+0x4801)
    #9 0x7f352127fdc0  (/usr/lib/jvm/java-8-openjdk-amd64/jre/bin/../lib/amd64/jli/libjli.so+0x8dc0)
    #10 0x7f3521052608 in start_thread (/lib/x86_64-linux-gnu/libpthread.so.0+0x9608)

Direct leak of 6952 byte(s) in 29 object(s) allocated from:
    #0 0x7f3521396bc8 in malloc (/usr/lib/gcc/x86_64-linux-gnu/9/libasan.so+0x10dbc8)
    #1 0x7f351d474414  (/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/amd64/server/libjvm.so+0x975414)
    #2 0x7f351cf62f91  (/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/amd64/server/libjvm.so+0x463f91)
    #3 0x7f351cf63425  (/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/amd64/server/libjvm.so+0x464425)
    #4 0x7f351cf64ac8  (/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/amd64/server/libjvm.so+0x465ac8)
    #5 0x7f351ced1752  (/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/amd64/server/libjvm.so+0x3d2752)
    #6 0x7f351ced1804  (/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/amd64/server/libjvm.so+0x3d2804)
    #7 0x7f351ce4548d  (/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/amd64/server/libjvm.so+0x34648d)
    #8 0x7f351cf92753  (/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/amd64/server/libjvm.so+0x493753)
    #9 0x7f351cf999a9  (/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/amd64/server/libjvm.so+0x49a9a9)
    #10 0x7f351d5d978f  (/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/amd64/server/libjvm.so+0xada78f)
    #11 0x7f351d5d9ae1  (/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/amd64/server/libjvm.so+0xadaae1)
    #12 0x7f351d47c78f  (/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/amd64/server/libjvm.so+0x97d78f)
    #13 0x7f3521052608 in start_thread (/lib/x86_64-linux-gnu/libpthread.so.0+0x9608)




https://www.tsingfun.com/it/cpp/asan-issue-with-asan-library-loading.html

https://liaoph.com/linux-shared-libary/

http://blog.sina.com.cn/s/blog_5423c45a0102xmvi.html

https://blog.gypsyengineer.com/en/security/running-java-with-addresssanitizer.html



https://cloud.tencent.com/developer/article/1823743

https://github.com/google/sanitizers/wiki/AddressSanitizer

https://gcc.gnu.org/onlinedocs/gcc/Instrumentation-Options.html
